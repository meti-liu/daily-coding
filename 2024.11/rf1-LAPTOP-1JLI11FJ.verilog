`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2024/11/30 19:20:17
// Design Name: 
// Module Name: seg7_top
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module seg7_top(
    input clk,
    input rstn,
    input [15:0] sw_i,
    output [7:0] disp_seg_o,
    output [7:0] disp_an_o
);
reg [31:0] clkdiv;
wire Clk_CPU;

always @(posedge clk or negedge rstn) begin
    if (!rstn)
        clkdiv <= 0;
    else
        clkdiv <= clkdiv + 1'b1;
end

assign Clk_CPU = (sw_i[15]) ? clkdiv[27] : clkdiv[25];

reg [63:0] display_data; // 7 segments display
reg [5:0] led_data_addr;  //2^6-=64,2^5=32？？？？？？？？？？？？？
reg [63:0] led_disp_data;
parameter LED_DATA_NUM = 19;
reg [63:0] LED_DATA [18:0];       //19个
initial begin
    LED_DATA[0] = 64'hC6F6F6F0C6F6F6F0;
    LED_DATA[1] = 64'hF9F6F6CFF9F6F6CF;
    LED_DATA[2] = 64'hFFC6F0FFFFC6F0FF;
    LED_DATA[3] = 64'hFFC0FFFFFFC0FFFF;
    LED_DATA[4] = 64'hFFA3FFFFFFA3FFFF;
    LED_DATA[5] = 64'hFFFFA3FFFFFFA3FF;
    LED_DATA[6] = 64'hFFFF9CFFFFFF9CFF;
    LED_DATA[7] = 64'hFF9EBCFFFF9EBCFF;
    LED_DATA[8] = 64'hFF9CFFFFFF9CFFFF;
    LED_DATA[9] = 64'hFFC0FFFFFFC0FFFF;
    LED_DATA[10] = 64'hFFA3FFFFFFA3FFFF;
    LED_DATA[11] = 64'hFFA7B3FFFFA7B3FF;
    LED_DATA[12] = 64'hFFC6F0FFFFC6F0FF;
    LED_DATA[13] = 64'hF9F6F6CFF9F6F6CF;
    LED_DATA[14] = 64'h9EBEBEBC9EBEBEBC;
    LED_DATA[15] = 64'h2737373327373733;
    LED_DATA[16] = 64'h505454EC505454EC;
    LED_DATA[17] = 64'h744454F8744454F8;
    LED_DATA[18] = 64'h0062080000620800;
end



wire [31:0] instr;
reg [31:0] reg_data;
reg [31:0] alu_disp_data;
reg [31:0] dmem_data;
// Generate LED_DATA
always @(posedge Clk_CPU or negedge rstn) begin
    if (!rstn) 
    begin
        led_data_addr <= 6'd0;
        led_disp_data <= 64'b1;    //不理解这里为什么是1
    end 
    else if (sw_i[0] == 1'b1) //sw_i[0]控制整个程序的开始，1的时候程序开始运行
    begin                                               
        if (led_data_addr == LED_DATA_NUM) begin
        //这里起到一个结束的作用，
        //led_data_addr>=19，led_data_addr就应该重新从0开始了，干这个
            led_data_addr <= 6'd0;
            led_disp_data <= 64'b1;
        end 
        else //ed_data_addr<=18,正常运行
        begin
            //将真正要显示的信号输入到led_disp_data
            led_disp_data <= LED_DATA[led_data_addr];
            //然后该显示下一个了，led_data_addr++            
            led_data_addr <= led_data_addr + 1'b1;
        end
    end 
    else 
    begin
    //这个时候保持原有的显示不变
        led_data_addr <= led_data_addr;
    end
end

// Choose display source data
always @(sw_i) begin
    if (sw_i[0] == 1'b0) begin
        case (sw_i[14:11])
            4'b1000: display_data = instr; // ROM
            4'b0100: display_data = reg_data; // RF
            4'b0010: display_data = alu_disp_data; // ALU
            4'b0001: display_data = dmem_data; // DMEM
            default: display_data = instr;//默认赋值ROM
        endcase
    end else begin
        display_data = led_disp_data;
    end
end




seg7x16 u_seg7x16(
    .clk(clk),
    .rstn(rstn),
    .i_data(display_data),
    .disp_mode(sw_i[0]),
    .o_seg(disp_seg_o),
    .o_sel(disp_an_o)
);

wire RegWrite;
wire rd;
wire WD;
reg reg_addr
RF u_RF
(
    .clk(clk),
    .RDWr(RegWrite),
    .rstn(rstn),
    .A1(rs1),
    .A2(rs2),
    .A3(rd),
    .WD(WD),
    .RD1(RD1),
    .RD2(RD2)
);

assign RwgWrite=sw_i[3];
assign rd=sw_i[11:8];
assign WD=sw_i[7:4];

always@(posedge clk or negedge rstn)
if(sw_i[13]==1'b1) begin
reg_addr=reg_addr+1'b1;
reg_data=U_RF.rf[reg_addr];
end


endmodule